// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DIDDataModelSDK
@_exported import DIDDataModelSDK
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct VerifiablePresentation : DIDDataModelSDK.Jsonable, DIDDataModelSDK.ProofsContainer, Swift.Identifiable {
  public var context: [Swift.String]
  public var id: Swift.String
  public var type: [Swift.String]
  public var holder: Swift.String
  @DIDDataModelSDK.UTCDatetime public var validFrom: Swift.String {
    get
    set
    _modify
  }
  @DIDDataModelSDK.UTCDatetime public var validUntil: Swift.String {
    get
    set
    _modify
  }
  public var verifierNonce: Swift.String
  public var verifiableCredential: [DIDDataModelSDK.VerifiableCredential]
  public var proof: DIDDataModelSDK.Proof?
  public var proofs: [DIDDataModelSDK.Proof]?
  public typealias ID = Swift.String
}
extension DIDDataModelSDK.VerifiablePresentation {
  public init(holder: Swift.String, @DIDDataModelSDK.UTCDatetime validFrom: Swift.String, @DIDDataModelSDK.UTCDatetime validUntil: Swift.String, verifierNonce: Swift.String, verifiableCredential: [DIDDataModelSDK.VerifiableCredential])
}
extension DIDDataModelSDK.VerifiablePresentation : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ProfileType : Swift.String, Swift.Codable {
  case IssueProfile
  case VerifyProfile
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LogoImage : DIDDataModelSDK.Jsonable {
  public enum LogoImageType : Swift.String, Swift.Codable {
    case jpg
    case png
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var format: DIDDataModelSDK.LogoImage.LogoImageType
  public var link: Swift.String?
  public var value: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProviderDetail : DIDDataModelSDK.Jsonable {
  public var did: Swift.String
  public var certVcRef: Swift.String
  public var name: Swift.String
  public var description: Swift.String?
  public var logo: DIDDataModelSDK.LogoImage?
  public var ref: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReqE2e : DIDDataModelSDK.Jsonable, DIDDataModelSDK.ProofContainer {
  public var nonce: Swift.String
  public var curve: DIDDataModelSDK.EllipticCurveType
  public var publicKey: Swift.String
  public var cipher: DIDDataModelSDK.SymmetricCipherType
  public var padding: DIDDataModelSDK.SymmetricPaddingType
  public var proof: DIDDataModelSDK.Proof?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IssueProfile : DIDDataModelSDK.Jsonable, DIDDataModelSDK.ProofContainer {
  public struct Profile : DIDDataModelSDK.Jsonable {
    public struct CredentialSchema : DIDDataModelSDK.Jsonable {
      public var id: Swift.String
      public var type: DIDDataModelSDK.CredentialSchemaType
      public var value: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Process : DIDDataModelSDK.Jsonable {
      public var endpoints: [Swift.String]
      public var reqE2e: DIDDataModelSDK.ReqE2e
      public var issuerNonce: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var issuer: DIDDataModelSDK.ProviderDetail
    public var credentialSchema: DIDDataModelSDK.IssueProfile.Profile.CredentialSchema
    public var process: DIDDataModelSDK.IssueProfile.Profile.Process
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var id: Swift.String
  public var type: DIDDataModelSDK.ProfileType
  public var title: Swift.String
  public var description: Swift.String?
  public var logo: DIDDataModelSDK.LogoImage?
  public var encoding: Swift.String
  public var language: Swift.String
  public var profile: DIDDataModelSDK.IssueProfile.Profile
  public var proof: DIDDataModelSDK.Proof?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifyProfile : DIDDataModelSDK.Jsonable, DIDDataModelSDK.ProofContainer {
  public struct Profile : DIDDataModelSDK.Jsonable {
    public struct ProfileFilter : DIDDataModelSDK.Jsonable {
      public struct CredentialSchema : DIDDataModelSDK.Jsonable {
        public var id: Swift.String
        public var type: DIDDataModelSDK.CredentialSchemaType
        public var value: Swift.String?
        public var displayClaims: [Swift.String]?
        public var requiredClaims: [Swift.String]?
        public var allowedIssuers: [Swift.String]?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public var credentialSchemas: [DIDDataModelSDK.VerifyProfile.Profile.ProfileFilter.CredentialSchema]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Process : DIDDataModelSDK.Jsonable {
      public var endpoints: [Swift.String]?
      public var reqE2e: DIDDataModelSDK.ReqE2e
      public var verifierNonce: Swift.String
      public var authType: DIDDataModelSDK.VerifyAuthType?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var verifier: DIDDataModelSDK.ProviderDetail
    public var filter: DIDDataModelSDK.VerifyProfile.Profile.ProfileFilter
    public var process: DIDDataModelSDK.VerifyProfile.Profile.Process
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var id: Swift.String
  public var type: DIDDataModelSDK.ProfileType
  public var title: Swift.String
  public var description: Swift.String?
  public var logo: DIDDataModelSDK.LogoImage?
  public var encoding: Swift.String
  public var language: Swift.String
  public var profile: DIDDataModelSDK.VerifyProfile.Profile
  public var proof: DIDDataModelSDK.Proof?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DIDDocument : DIDDataModelSDK.Jsonable, DIDDataModelSDK.ProofsContainer {
  public var context: [Swift.String]
  public var id: Swift.String
  public var controller: Swift.String
  public var verificationMethod: [DIDDataModelSDK.DIDDocument.VerificationMethod]
  public var assertionMethod: [Swift.String]?
  public var authentication: [Swift.String]?
  public var keyAgreement: [Swift.String]?
  public var capabilityInvocation: [Swift.String]?
  public var capabilityDelegation: [Swift.String]?
  public var service: [DIDDataModelSDK.DIDDocument.Service]?
  @DIDDataModelSDK.UTCDatetime public var created: Swift.String {
    get
    set
    _modify
  }
  @DIDDataModelSDK.UTCDatetime public var updated: Swift.String {
    get
    set
    _modify
  }
  @DIDDataModelSDK.DIDVersionId public var versionId: Swift.String {
    get
    set
    _modify
  }
  public var deactivated: Swift.Bool
  public var proof: DIDDataModelSDK.Proof?
  public var proofs: [DIDDataModelSDK.Proof]?
  public struct VerificationMethod : DIDDataModelSDK.Jsonable {
    public var id: Swift.String
    public var type: DIDDataModelSDK.DIDDocument.DIDKeyType
    public var controller: Swift.String
    public var publicKeyMultibase: Swift.String
    public var authType: DIDDataModelSDK.AuthType
    public init(id: Swift.String, type: DIDDataModelSDK.DIDDocument.DIDKeyType, controller: Swift.String, publicKeyMultibase: Swift.String, authType: DIDDataModelSDK.AuthType)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Service : DIDDataModelSDK.Jsonable {
    public var id: Swift.String
    public var type: DIDDataModelSDK.DIDDocument.DIDServiceType
    public var serviceEndpoint: [Swift.String]
    public init(id: Swift.String, type: DIDDataModelSDK.DIDDocument.DIDServiceType, serviceEndpoint: [Swift.String])
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum DIDKeyType : Swift.String, Swift.Codable, DIDDataModelSDK.AlgorithmTypeConvertible {
    public static var commonString: Swift.String {
      get
    }
    case rsaVerificationKey2018
    case secp256k1VerificationKey2018
    case secp256r1VerificationKey2018
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DIDServiceType : Swift.String, Swift.Codable {
    case linkedDomains
    case credentialRegistry
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension DIDDataModelSDK.DIDDocument {
  public init(id: Swift.String, controller: Swift.String? = nil, @DIDDataModelSDK.UTCDatetime created: Swift.String)
}
extension DIDDataModelSDK.DIDDocument : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ClaimType : Swift.String, Swift.Codable {
  case text
  case image
  case document
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ClaimFormat : Swift.String, Swift.Codable {
  case plain
  case html
  case xml
  case csv
  case png
  case jpg
  case gif
  case txt
  case pdf
  case word
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Location : Swift.String, Swift.Codable {
  case inline
  case remote
  case attach
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ProofPurpose : Swift.String, Swift.Codable {
  case assertionMethod
  case authentication
  case keyAgreement
  case capabilityInvocation
  case capabilityDelegation
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ProofType : Swift.String, Swift.Codable, DIDDataModelSDK.AlgorithmTypeConvertible {
  public static var commonString: Swift.String {
    get
  }
  case rsaSignature2018
  case secp256k1Signature2018
  case secp256r1Signature2018
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AlgorithmType : Swift.String, Swift.Codable {
  case rsa
  case secp256k1
  case secp256r1
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CredentialSchemaType : Swift.String, Swift.Codable {
  case osdSchemaCredential
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EllipticCurveType : Swift.String, Swift.Codable, DIDDataModelSDK.ConvertibleToAlgorithmType {
  public static var commonString: Swift.String {
    get
  }
  case secp256k1
  case secp256r1
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SymmetricCipherType : Swift.String, Swift.Codable {
  case aes128CBC
  case aes128ECB
  case aes256CBC
  case aes256ECB
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SymmetricPaddingType : Swift.String, Swift.Codable {
  case noPad
  case pkcs5
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AuthType : Swift.Int, Swift.Codable {
  case free
  case pin
  case bio
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VerifyAuthType : Swift.OptionSet, Swift.Sequence, Swift.Codable {
  public let rawValue: Swift.Int
  public static let free: DIDDataModelSDK.VerifyAuthType
  public static let pin: DIDDataModelSDK.VerifyAuthType
  public static let bio: DIDDataModelSDK.VerifyAuthType
  public static let and: DIDDataModelSDK.VerifyAuthType
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = DIDDataModelSDK.VerifyAuthType.Element
  public typealias Element = DIDDataModelSDK.VerifyAuthType
  public typealias Iterator = DIDDataModelSDK.OptionSetIterator<DIDDataModelSDK.VerifyAuthType>
  public typealias RawValue = Swift.Int
}
extension Swift.OptionSet where Self.RawValue == Swift.Int {
  public func makeIterator() -> DIDDataModelSDK.OptionSetIterator<Self>
}
public struct OptionSetIterator<Element> : Swift.IteratorProtocol where Element : Swift.OptionSet, Element.RawValue == Swift.Int {
  public init(element: Element)
  public mutating func next() -> Element?
}
public struct VCSchema : DIDDataModelSDK.Jsonable {
  public struct VCMetadata : DIDDataModelSDK.Jsonable {
    public var language: Swift.String
    public var formatVersion: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CredentialSubject : DIDDataModelSDK.Jsonable {
    public struct Claim : DIDDataModelSDK.Jsonable {
      public struct Namespace : DIDDataModelSDK.Jsonable {
        public var id: Swift.String
        public var name: Swift.String
        public var ref: Swift.String?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public struct ClaimDef : DIDDataModelSDK.Jsonable {
        public var id: Swift.String
        public var caption: Swift.String
        public var type: DIDDataModelSDK.ClaimType
        public var format: DIDDataModelSDK.ClaimFormat
        public var hideValue: Swift.Bool?
        public var location: DIDDataModelSDK.Location?
        public var required: Swift.Bool?
        public var description: Swift.String?
        public var i18n: [Swift.String : Swift.String]?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public var namespace: DIDDataModelSDK.VCSchema.CredentialSubject.Claim.Namespace
      public var items: [DIDDataModelSDK.VCSchema.CredentialSubject.Claim.ClaimDef]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var claims: [DIDDataModelSDK.VCSchema.CredentialSubject.Claim]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var id: Swift.String
  public var schema: Swift.String
  public var title: Swift.String
  public var description: Swift.String
  public var metadata: DIDDataModelSDK.VCSchema.VCMetadata
  public var credentialSubject: DIDDataModelSDK.VCSchema.CredentialSubject
}
extension DIDDataModelSDK.VCSchema : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VerifiableCredential : DIDDataModelSDK.Jsonable, Swift.Identifiable {
  public var context: [Swift.String]
  public var id: Swift.String
  public var type: [Swift.String]
  public var issuer: DIDDataModelSDK.VerifiableCredential.Issuer
  public var issuanceDate: Swift.String
  @DIDDataModelSDK.UTCDatetime public var validFrom: Swift.String {
    get
    set
    _modify
  }
  @DIDDataModelSDK.UTCDatetime public var validUntil: Swift.String {
    get
    set
    _modify
  }
  public var encoding: Swift.String
  public var formatVersion: Swift.String
  public var language: Swift.String
  public var evidence: [DIDDataModelSDK.VerifiableCredential.Evidence]
  public var credentialSchema: DIDDataModelSDK.VerifiableCredential.CredentialSchema
  public var credentialSubject: DIDDataModelSDK.VerifiableCredential.CredentialSubject
  public var proof: DIDDataModelSDK.VCProof
  public struct Issuer : DIDDataModelSDK.Jsonable {
    public var id: Swift.String
    public var name: Swift.String?
    public var certVcRef: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Evidence {
    case documentVerification(DIDDataModelSDK.VerifiableCredential.DocumentVerificationEvidence)
  }
  public enum Presence : Swift.String, Swift.Codable {
    case physical
    case digital
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EvidenceType : Swift.String, Swift.Codable {
    case documentVerification
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct DocumentVerificationEvidence : DIDDataModelSDK.Jsonable {
    public var id: Swift.String?
    public var type: DIDDataModelSDK.VerifiableCredential.EvidenceType
    public var verifier: Swift.String
    public var evidenceDocument: Swift.String
    public var subjectPresence: DIDDataModelSDK.VerifiableCredential.Presence
    public var documentPresence: DIDDataModelSDK.VerifiableCredential.Presence
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CredentialSchema : DIDDataModelSDK.Jsonable {
    public var id: Swift.String
    public var type: DIDDataModelSDK.CredentialSchemaType
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CredentialSubject : DIDDataModelSDK.Jsonable {
    public var id: Swift.String
    public var claims: [DIDDataModelSDK.VerifiableCredential.Claim]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Claim : DIDDataModelSDK.Jsonable {
    public struct Internationalization : DIDDataModelSDK.Jsonable {
      public var caption: Swift.String
      public var value: Swift.String?
      public var digestSRI: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var code: Swift.String
    public var caption: Swift.String
    public var value: Swift.String
    public var type: DIDDataModelSDK.ClaimType
    public var format: DIDDataModelSDK.ClaimFormat
    public var hideValue: Swift.Bool?
    public var location: DIDDataModelSDK.Location?
    public var digestSRI: Swift.String?
    public var i18n: [Swift.String : DIDDataModelSDK.VerifiableCredential.Claim.Internationalization]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public typealias ID = Swift.String
}
extension DIDDataModelSDK.VerifiableCredential : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DIDDataModelSDK.VerifiableCredential.Evidence : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Proof : DIDDataModelSDK.ProofProtocol {
  @DIDDataModelSDK.UTCDatetime public var created: Swift.String {
    get
    set
    _modify
  }
  public var proofPurpose: DIDDataModelSDK.ProofPurpose
  public var verificationMethod: Swift.String
  public var type: DIDDataModelSDK.ProofType
  public var proofValue: Swift.String?
  public init(created: Swift.String, proofPurpose: DIDDataModelSDK.ProofPurpose, verificationMethod: Swift.String, type: DIDDataModelSDK.ProofType, proofValue: Swift.String? = nil)
}
public struct VCProof : DIDDataModelSDK.ProofProtocol, DIDDataModelSDK.Jsonable {
  @DIDDataModelSDK.UTCDatetime public var created: Swift.String {
    get
    set
    _modify
  }
  public var proofPurpose: DIDDataModelSDK.ProofPurpose
  public var verificationMethod: Swift.String
  public var type: DIDDataModelSDK.ProofType
  public var proofValue: Swift.String?
  public var proofValueList: [Swift.String]?
  public init(created: Swift.String, proofPurpose: DIDDataModelSDK.ProofPurpose, verificationMethod: Swift.String, type: DIDDataModelSDK.ProofType, proofValue: Swift.String? = nil, proofValueList: [Swift.String]? = nil)
}
extension DIDDataModelSDK.Proof : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DIDDataModelSDK.VCProof : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Jsonable : Swift.Decodable, Swift.Encodable {
  init(from jsonData: Foundation.Data) throws
  init(from jsonString: Swift.String) throws
  func toJsonData(isPretty: Swift.Bool) throws -> Foundation.Data
  func toJson(isPretty: Swift.Bool) throws -> Swift.String
}
extension DIDDataModelSDK.Jsonable {
  public init(from jsonData: Foundation.Data) throws
  public init(from jsonString: Swift.String) throws
  public func toJsonData(isPretty: Swift.Bool = false) throws -> Foundation.Data
  public func toJson(isPretty: Swift.Bool = false) throws -> Swift.String
}
public protocol ProofProtocol : DIDDataModelSDK.Jsonable {
  var created: Swift.String { get set }
  var verificationMethod: Swift.String { get set }
  var proofPurpose: DIDDataModelSDK.ProofPurpose { get set }
  var type: DIDDataModelSDK.ProofType { get set }
  var proofValue: Swift.String? { get set }
}
public protocol ProofContainer : DIDDataModelSDK.Jsonable {
  var proof: DIDDataModelSDK.Proof? { get set }
}
public protocol ProofsContainer : DIDDataModelSDK.Jsonable {
  var proof: DIDDataModelSDK.Proof? { get set }
  var proofs: [DIDDataModelSDK.Proof]? { get set }
}
public protocol ConvertibleToAlgorithmType : Swift.RawRepresentable where Self.RawValue == Swift.String {
  static var commonString: Swift.String { get }
  func convertTo() -> DIDDataModelSDK.AlgorithmType
}
public protocol ConvertibleFromAlgorithmType : Swift.RawRepresentable where Self.RawValue == Swift.String {
  static var commonString: Swift.String { get }
  static func convertFrom(algorithmType: DIDDataModelSDK.AlgorithmType) -> Self
}
public typealias AlgorithmTypeConvertible = DIDDataModelSDK.ConvertibleFromAlgorithmType & DIDDataModelSDK.ConvertibleToAlgorithmType
extension DIDDataModelSDK.ConvertibleToAlgorithmType {
  public func convertTo() -> DIDDataModelSDK.AlgorithmType
}
extension DIDDataModelSDK.ConvertibleFromAlgorithmType {
  public static func convertFrom(algorithmType: DIDDataModelSDK.AlgorithmType) -> Self
}
@propertyWrapper public struct UTCDatetime {
  public var wrappedValue: Swift.String {
    get
    set
  }
  public init(wrappedValue: Swift.String)
}
@propertyWrapper public struct DIDVersionId {
  public var wrappedValue: Swift.String {
    get
    set
  }
  public init(wrappedValue: Swift.String)
}
extension DIDDataModelSDK.ProfileType : Swift.Equatable {}
extension DIDDataModelSDK.ProfileType : Swift.Hashable {}
extension DIDDataModelSDK.ProfileType : Swift.RawRepresentable {}
extension DIDDataModelSDK.LogoImage.LogoImageType : Swift.Equatable {}
extension DIDDataModelSDK.LogoImage.LogoImageType : Swift.Hashable {}
extension DIDDataModelSDK.LogoImage.LogoImageType : Swift.RawRepresentable {}
extension DIDDataModelSDK.DIDDocument.DIDKeyType : Swift.Equatable {}
extension DIDDataModelSDK.DIDDocument.DIDKeyType : Swift.Hashable {}
extension DIDDataModelSDK.DIDDocument.DIDServiceType : Swift.Equatable {}
extension DIDDataModelSDK.DIDDocument.DIDServiceType : Swift.Hashable {}
extension DIDDataModelSDK.DIDDocument.DIDServiceType : Swift.RawRepresentable {}
extension DIDDataModelSDK.ClaimType : Swift.Equatable {}
extension DIDDataModelSDK.ClaimType : Swift.Hashable {}
extension DIDDataModelSDK.ClaimType : Swift.RawRepresentable {}
extension DIDDataModelSDK.ClaimFormat : Swift.Equatable {}
extension DIDDataModelSDK.ClaimFormat : Swift.Hashable {}
extension DIDDataModelSDK.ClaimFormat : Swift.RawRepresentable {}
extension DIDDataModelSDK.Location : Swift.Equatable {}
extension DIDDataModelSDK.Location : Swift.Hashable {}
extension DIDDataModelSDK.Location : Swift.RawRepresentable {}
extension DIDDataModelSDK.ProofPurpose : Swift.Equatable {}
extension DIDDataModelSDK.ProofPurpose : Swift.Hashable {}
extension DIDDataModelSDK.ProofPurpose : Swift.RawRepresentable {}
extension DIDDataModelSDK.ProofType : Swift.Equatable {}
extension DIDDataModelSDK.ProofType : Swift.Hashable {}
extension DIDDataModelSDK.AlgorithmType : Swift.Equatable {}
extension DIDDataModelSDK.AlgorithmType : Swift.Hashable {}
extension DIDDataModelSDK.AlgorithmType : Swift.RawRepresentable {}
extension DIDDataModelSDK.CredentialSchemaType : Swift.Equatable {}
extension DIDDataModelSDK.CredentialSchemaType : Swift.Hashable {}
extension DIDDataModelSDK.CredentialSchemaType : Swift.RawRepresentable {}
extension DIDDataModelSDK.EllipticCurveType : Swift.Equatable {}
extension DIDDataModelSDK.EllipticCurveType : Swift.Hashable {}
extension DIDDataModelSDK.SymmetricCipherType : Swift.Equatable {}
extension DIDDataModelSDK.SymmetricCipherType : Swift.Hashable {}
extension DIDDataModelSDK.SymmetricCipherType : Swift.RawRepresentable {}
extension DIDDataModelSDK.SymmetricPaddingType : Swift.Equatable {}
extension DIDDataModelSDK.SymmetricPaddingType : Swift.Hashable {}
extension DIDDataModelSDK.SymmetricPaddingType : Swift.RawRepresentable {}
extension DIDDataModelSDK.AuthType : Swift.Equatable {}
extension DIDDataModelSDK.AuthType : Swift.Hashable {}
extension DIDDataModelSDK.AuthType : Swift.RawRepresentable {}
extension DIDDataModelSDK.VerifiableCredential.Presence : Swift.Equatable {}
extension DIDDataModelSDK.VerifiableCredential.Presence : Swift.Hashable {}
extension DIDDataModelSDK.VerifiableCredential.Presence : Swift.RawRepresentable {}
extension DIDDataModelSDK.VerifiableCredential.EvidenceType : Swift.Equatable {}
extension DIDDataModelSDK.VerifiableCredential.EvidenceType : Swift.Hashable {}
extension DIDDataModelSDK.VerifiableCredential.EvidenceType : Swift.RawRepresentable {}
